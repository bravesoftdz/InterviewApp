unit Unit2;

interface

uses Classes;

  type
    TTimeChangedEvent = procedure(sec, min, hour : ShortInt);

  type
    TTerminatedEvent = procedure;

  type
    TMyThread = class(TThread)
  private
    var s, m, h : ShortInt;
    timeChangedEventHandler : TTimeChangedEvent;
    terminatedEventHandler : TTerminatedEvent;
  protected
    procedure Execute; override;
  public
    constructor Create(sec, min, hour : ShortInt;
    timeChangedEventHandlerP : TTimeChangedEvent;
    terminatedEventHandlerP : TTerminatedEvent);
  end;

  type
    TMyTimer = class
    private
      var s, m, h : integer;
      onTimeChanged : TTimeChangedEvent;
      terminatedEventHandler : TTerminatedEvent;
      myThread : TMyThread;
    public
      constructor Create(sec, min, hour : ShortInt;
      timeChangedEventHandlerP : TTimeChangedEvent;
      terminatedEventHandlerP : TTerminatedEvent);

      procedure Start();
      procedure Stop();
   end;

  implementation

constructor TMyTimer.Create(sec, min, hour : ShortInt;
timeChangedEventHandler : TTimeChangedEvent;
terminatedEventHandler : TTerminatedEvent);
begin
  s := sec;
  m := min;
  h := hour;
  onTimeChanged := timeChangedEventHandler;
  terminatedEventHandler := terminatedEventHandler;
end;

procedure TMyTimer.Start();
begin
  myThread := TMyThread.Create(s, m, h, onTimeChanged, terminatedEventHandler);
  //myThread.Execute;
end;

procedure TMyTimer.Stop();
begin
  myThread.Terminate;
end;

constructor TMyThread.Create(sec, min, hour : ShortInt;
timeChangedEventHandlerP : TTimeChangedEvent;
terminatedEventHandlerP : TTerminatedEvent);
begin
  inherited Create(false);
  s := sec;
  m := min;
  h := hour;
  timeChangedEventHandler := timeChangedEventHandlerP;
  terminatedEventHandler := terminatedEventHandlerP;
end;

procedure TMyThread.Execute;
begin
  while True do
  begin
    if Terminated then break;

    s := s - 1;
    if s < 0 then
    begin
      m := m - 1;
      if m < 0 then
      begin
        h := h - 1;
        if h < 0 then
          begin
             if Assigned(terminatedEventHandler) then
                terminatedEventHandler();
            break;
          end;
        m := 59;
      end;
      s := 59
    end;


    if Assigned(timeChangedEventHandler)then
      timeChangedEventHandler(s,m,h);

    Sleep(1000);
  end;
end;

end.
