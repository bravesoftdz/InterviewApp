unit Unit2;

interface

uses Classes;

  type
    TCallBack = procedure() of object;

  type
    TMyThread = class(TThread)
  private
    var s, m, h : Integer;
    timeChangedEvent : TCallBack;
  protected
    procedure Execute; override;
  public
    constructor Create(sec, min, hour : integer; );
  end;

  type
    TMyTimer = class
    private
      var s, m, h : Integer;
      timeChangedEvent : TCallBack;
      myThread : TMyThread;
    public
      constructor Create(sec, min, hour : integer);
      property OnTimeChanged : TCallBack write timeChangedEvent;
      procedure Start();
      procedure Stop();
   end;

  implementation

constructor TMyTimer.Create(sec, min, hour : integer);
begin
  s := sec;
  m := min;
  h := hour;
end;

procedure TMyTimer.Start();
begin
  myThread := TMyThread.Create;
  myThread.Execute;
end;

procedure TMyTimer.Stop();
begin
  myThread.Terminate;
end;

constructor TMyThread.Create(sec, min, hour : integer);
begin

end;

procedure TMyThread.Execute;
var
  i : Integer;
begin
  for i := 0 to 10 do
  begin
     if Terminated then break;

    //timeChangedEvent();
    Sleep(1000);

  end;
end;

end.
