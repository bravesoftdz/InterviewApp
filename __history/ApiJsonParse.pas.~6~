unit ApiJsonParse;

interface
  uses DataUnit, System.Net.HttpClient, System.Json;

  type
    ApiCountries = class
      private
        FRoot : TRootDTO;
        function ParseJsonToObject(value : string) : TRootDTO;
      public
        property Root : TRootDTO read Froot write Froot;
        function GetCountryByName(name : string) : TItemDTO;
    end;

implementation

function ApiCountries.GetCountryByName(name : string) : TItemDTO;
var

  query: String;
  httpClient: THttpClient;
  httpResponse: IHttpResponse;
  response : string;

begin
  query := 'https://restcountries.eu/rest/v2/name/' + name;

  httpClient := THTTPClient.Create;

  try
    HttpResponse := HttpClient.Get(query);
    response := HttpResponse.ContentAsString;
  finally
    HttpClient.Free;
  end;

  Result := ParseJsonToObject(response).Items[0];
end;

function ApiCountries.ParseJsonToObject(value : string) : TRootDTO;
var
  jsonValue, rootElement, arrayElementItem: TJSonValue;
  rootArray, arrayElement: TJSONArray;

  root : TRootDTO;
  item : TItemDTO;

  currency : TCurrenciesDTO;
  language : TLanguagesDTO;

  i : integer;
begin
  jsonValue := TJSonObject.ParseJSONValue(value);
  rootArray := JsonValue as TJSONArray;

  root := TRootDTO.Create;

  for rootElement in rootArray do begin
    item := TItemDTO.Create;

    // Get primary values
    item.Name := rootElement.GetValue<string>('name');
    item.Capital := rootElement.GetValue<string>('capital');
    item.Area := rootElement.GetValue<double>('area');
    item.Flag := rootElement.GetValue<string>('flag');
    item.Region := rootElement.GetValue<string>('region');
    item.Subregion := rootElement.GetValue<string>('subregion');

    // Array of currencies
    arrayElement := rootElement.GetValue<TJSONValue>('currencies') as TJSONArray;

    i := 0;
    for arrayElementItem in arrayElement do begin
      currency := TCurrenciesDTO.Create;

      currency.Code := arrayElementItem.GetValue<string>('code');
      currency.Name := arrayElementItem.GetValue<string>('name');
      currency.Symbol := arrayElementItem.GetValue<string>('symbol');
      item.Currencies[i] := currency;
      i := i + 1;
    end;


  end;

  Result := root;
end;

end.
